<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dihaiboyun.tserver.dao.IManagerDAO">
	
	<cache flushInterval="600000" eviction="LRU" type="org.mybatis.caches.oscache.OSCache"/>
	
	<sql id="managerLikeWhere">
		<where>
            <if test ="id != null and id > -1">
				and `ID` = #{id}
			</if>
	        <if test ="email != null and email != ''">
			    and `EMAIL` like '%${email}%'
		    </if>
	        <if test ="password != null and password != ''">
			    and `PASSWORD` like '%${password}%'
		    </if>
	        <if test ="nickname != null and nickname != ''">
			    and `NICKNAME` like '%${nickname}%'
		    </if>
	        <if test ="ename != null and ename != ''">
			    and `ENAME` like '%${ename}%'
		    </if>
	        <if test ="logo != null and logo != ''">
			    and `LOGO` like '%${logo}%'
		    </if>
            <if test ="status != null and status > -1">
				and `STATUS` = #{status}
			</if>
            <if test ="departmentId != null and departmentId > -1">
				and `DEPARTMENT_ID` = #{departmentId}
			</if>
            <if test ="positionId != null and positionId > -1">
				and `POSITION_ID` = #{positionId}
			</if>
            <if test ="roleId != null and roleId > -1">
				and `ROLE_ID` = #{roleId}
			</if>
	        <if test ="creator != null and creator != ''">
			    and `CREATOR` like '%${creator}%'
		    </if>
	        <if test ="loginip != null and loginip != ''">
			    and `LOGINIP` like '%${loginip}%'
		    </if>
		</where>
	</sql>
	
	<sql id="managerPage">
		<if test="null != start">
		  limit #{start},#{pageSize}
		</if>
	</sql>
	
	<sql id="managerField">
		`ID`, `EMAIL`, `PASSWORD`, `NICKNAME`, `ENAME`, `LOGO`, `STATUS`, `DEPARTMENT_ID`, `POSITION_ID`, `ROLE_ID`, `CREATOR`, `CREATETIME`, `LOGINTIME`, `LOGINIP`
	</sql>
	
	<resultMap id="managerMap" type="manager">
	    	<result property="id" column="ID" javaType="java.lang.Integer" jdbcType="INTEGER" />
	    	<result property="email" column="EMAIL" javaType="java.lang.String" jdbcType="VARCHAR" />
	    	<result property="password" column="PASSWORD" javaType="java.lang.String" jdbcType="VARCHAR" />
	    	<result property="nickname" column="NICKNAME" javaType="java.lang.String" jdbcType="VARCHAR" />
	    	<result property="ename" column="ENAME" javaType="java.lang.String" jdbcType="VARCHAR" />
	    	<result property="logo" column="LOGO" javaType="java.lang.String" jdbcType="VARCHAR" />
	    	<result property="status" column="STATUS" javaType="java.lang.Integer" jdbcType="INTEGER" />
	    	<result property="departmentId" column="DEPARTMENT_ID" javaType="java.lang.Integer" jdbcType="INTEGER" />
	    	<result property="positionId" column="POSITION_ID" javaType="java.lang.Integer" jdbcType="INTEGER" />
	    	<result property="roleId" column="ROLE_ID" javaType="java.lang.Integer" jdbcType="INTEGER" />
	    	<result property="creator" column="CREATOR" javaType="java.lang.String" jdbcType="VARCHAR" />
	    	<result property="createtime" column="CREATETIME" javaType="java.lang.String" jdbcType="VARCHAR" />
	    	<result property="logintime" column="LOGINTIME" javaType="java.lang.String" jdbcType="VARCHAR" />
	    	<result property="loginip" column="LOGINIP" javaType="java.lang.String" jdbcType="VARCHAR" />
	</resultMap>
	
	<insert id="addSaveManager" parameterType="manager">
		insert into `manager` (
           `EMAIL`, 
           `PASSWORD`, 
           `NICKNAME`, 
           `ENAME`, 
           `LOGO`, 
           `STATUS`, 
           `DEPARTMENT_ID`, 
           `POSITION_ID`, 
           `ROLE_ID`, 
           `CREATOR`, 
           `CREATETIME`, 
           `LOGINTIME`, 
           `LOGINIP`
		) values 
		(
            #{email}, 
            #{password}, 
            #{nickname}, 
            #{ename}, 
            #{logo}, 
            #{status}, 
            #{departmentId}, 
            #{positionId}, 
            #{roleId}, 
            #{creator}, 
            #{createtime}, 
            #{logintime}, 
            #{loginip}
		)
		<selectKey keyProperty="id"  resultType="java.lang.Integer">
			select last_insert_id() as id from `manager` limit 1
		</selectKey>
	</insert>
	
	<delete id="deleteByIds" parameterType="String">
		delete from `manager` ${_parameter}
	</delete>
	
	<update id="editSaveManager" parameterType="manager">
		update `manager` set 
              `EMAIL` = #{email}, 
              `PASSWORD` = #{password}, 
              `NICKNAME` = #{nickname}, 
              `ENAME` = #{ename}, 
              `LOGO` = #{logo}, 
              `STATUS` = #{status}, 
              `DEPARTMENT_ID` = #{departmentId}, 
              `POSITION_ID` = #{positionId}, 
              `ROLE_ID` = #{roleId}, 
              `CREATOR` = #{creator}, 
              `CREATETIME` = #{createtime}, 
              `LOGINTIME` = #{logintime}, 
              `LOGINIP` = #{loginip}
        	where ID = #{id}
	</update>
	
	<select id="selectManagerById" parameterType="manager" resultMap="managerMap"  >
		SELECT * FROM `manager` where ID = #{id}
	</select>
	
	<select id="getManagerCount" parameterType="manager" resultType="Long" >
		select count(*) from `manager`
		<include refid="managerLikeWhere" />
	</select>
	
	<select id="selectAll" parameterType="manager" resultMap="managerMap" >
		select * from `manager`
	</select>
	
	<select id="selectManagerLike" parameterType="manager" resultMap="managerMap" >
		SELECT <include refid="managerField" /> FROM `manager`
	        <include refid="managerLikeWhere" />
			order by ID desc
	        <include refid="managerPage" /> 
	</select>
	
	<select id="selectManagerByEmailPassword" parameterType="manager" resultMap="managerMap" >
	     SELECT <include refid="managerField" /> FROM `manager`
	     where EMAIL= #{email} and PASSWORD = #{password} 
	</select>
</mapper>